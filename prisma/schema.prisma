generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String
  role          UserRole      @default(GUEST)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  balanceRUB    Float         @default(0)
  balanceUSDT   Float         @default(0)
  walletAddress String?
  bankAccounts  BankAccount[]
  deposits      Deposit[]
  devices       Device[]
  disputes      Dispute[]
  keys          Key[]
  messages      Message[]
  tokens        Token[]
  Transaction   Transaction[]

  @@index([name])
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Key {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  userId    Int
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id                 Int               @id @default(autoincrement())
  status             TransactionStatus
  description        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  amountRUB          Float             @default(0)
  amountToChargeRUB  Float             @default(0)
  amountToChargeUSDT Float             @default(0)
  inProgress         Boolean           @default(false)
  amountUSDT         Float             @default(0)
  bankName           String?
  cardNumber         String?
  confirmedAt        DateTime?
  exchangeRate       Float             @default(0)
  isMock             Boolean           @default(false)
  trafficType        TrafficType?
  userId             Int?
  phoneNumber        String?
  disputes           Dispute[]
  Receipt            Receipt[]
  User               User?             @relation(fields: [userId], references: [id])
}

model Dispute {
  id            Int         @id @default(autoincrement())
  reason        String
  description   String
  resolved      Boolean     @default(false)
  transactionId Int
  userId        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  accountName   String
  accountNumber String
  bankName      String
  details       String?
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Device {
  id         Int      @id @default(autoincrement())
  deviceName String
  deviceType String
  lastLogin  DateTime
  ipAddress  String
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  isRead    Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Deposit {
  id              Int           @id @default(autoincrement())
  amount          Float
  amountAfterFee  Float
  transactionHash String?
  status          DepositStatus @default(PENDING)
  userId          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
}

model SystemSettings {
  id                  Int      @id @default(autoincrement())
  commissionRate      Float    @default(9.0)
  systemWalletAddress String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("system_settings")
}

model Receipt {
  id            Int         @id @default(autoincrement())
  filePath      String
  isVerified    Boolean     @default(false)
  isFake        Boolean     @default(false)
  transactionId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  Transaction   Transaction @relation(fields: [transactionId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  GUEST
}

enum TransactionStatus {
  PENDING
  VERIFICATION
  FINALIZATION
  ACTIVE
  HISTORY
  CANCELLED
}

enum DepositStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TrafficType {
  SBP
  CARD
}
